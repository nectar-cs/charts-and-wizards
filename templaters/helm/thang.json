{"name":"elas","info":{"first_deployed":"2020-04-09T16:40:39.827602342+02:00","last_deployed":"2020-04-09T16:40:39.827602342+02:00","deleted":"","description":"Dry run complete","status":"pending-install","notes":"The elasticsearch cluster has been installed.\n\nElasticsearch can be accessed:\n\n  * Within your cluster, at the following DNS name at port 9200:\n\n    elas-elasticsearch-client.default.svc\n\n  * From outside the cluster, run these commands in the same shell:\n\n    export POD_NAME=$(kubectl get pods --namespace default -l \"app=elasticsearch,component=client,release=elas\" -o jsonpath=\"{.items[0].metadata.name}\")\n    echo \"Visit http://127.0.0.1:9200 to use Elasticsearch\"\n    kubectl port-forward --namespace default $POD_NAME 9200:9200\n"},"chart":{"metadata":{"name":"elasticsearch","home":"https://www.elastic.co/products/elasticsearch","sources":["https://www.elastic.co/products/elasticsearch","https://github.com/jetstack/elasticsearch-pet","https://github.com/giantswarm/kubernetes-elastic-stack","https://github.com/GoogleCloudPlatform/elasticsearch-docker","https://github.com/clockworksoul/helm-elasticsearch","https://github.com/pires/kubernetes-elasticsearch-cluster"],"version":"1.32.4","description":"Flexible and powerful open source, distributed real-time search and analytics engine.","maintainers":[{"name":"simonswine","email":"christian@jetstack.io"},{"name":"icereval","email":"michael.haselton@gmail.com"},{"name":"rendhalver","email":"pete.brown@powerhrg.com"},{"name":"desaintmartin","email":"cedric@desaintmartin.fr"},{"name":"KongZ","email":"goonohc@gmail.com"},{"name":"hectorj2f","email":"hfernandez@mesosphere.com"}],"icon":"https://static-www.elastic.co/assets/blteb1c97719574938d/logo-elastic-elasticsearch-lt.svg","apiVersion":"v1","appVersion":"6.8.6"},"lock":null,"templates":[{"name":"templates/NOTES.txt","data":"VGhlIGVsYXN0aWNzZWFyY2ggY2x1c3RlciBoYXMgYmVlbiBpbnN0YWxsZWQuCgpFbGFzdGljc2VhcmNoIGNhbiBiZSBhY2Nlc3NlZDoKCiAgKiBXaXRoaW4geW91ciBjbHVzdGVyLCBhdCB0aGUgZm9sbG93aW5nIEROUyBuYW1lIGF0IHBvcnQgOTIwMDoKCiAgICB7eyB0ZW1wbGF0ZSAiZWxhc3RpY3NlYXJjaC5jbGllbnQuZnVsbG5hbWUiIC4gfX0ue3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19LnN2YwoKICAqIEZyb20gb3V0c2lkZSB0aGUgY2x1c3RlciwgcnVuIHRoZXNlIGNvbW1hbmRzIGluIHRoZSBzYW1lIHNoZWxsOgogICAge3stIGlmIGNvbnRhaW5zICJOb2RlUG9ydCIgLlZhbHVlcy5jbGllbnQuc2VydmljZVR5cGUgfX0KCiAgICBleHBvcnQgTk9ERV9QT1JUPSQoa3ViZWN0bCBnZXQgLS1uYW1lc3BhY2Uge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19IC1vIGpzb25wYXRoPSJ7LnNwZWMucG9ydHNbMF0ubm9kZVBvcnR9IiBzZXJ2aWNlcyB7eyB0ZW1wbGF0ZSAiZWxhc3RpY3NlYXJjaC5jbGllbnQuZnVsbG5hbWUiIC4gfX0pCiAgICBleHBvcnQgTk9ERV9JUD0kKGt1YmVjdGwgZ2V0IG5vZGVzIC0tbmFtZXNwYWNlIHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fSAtbyBqc29ucGF0aD0iey5pdGVtc1swXS5zdGF0dXMuYWRkcmVzc2VzWzBdLmFkZHJlc3N9IikKICAgIGVjaG8gaHR0cDovLyROT0RFX0lQOiROT0RFX1BPUlQKICAgIHt7LSBlbHNlIGlmIGNvbnRhaW5zICJMb2FkQmFsYW5jZXIiIC5WYWx1ZXMuY2xpZW50LnNlcnZpY2VUeXBlIH19CgogICAgIFdBUk5JTkc6IFlvdSBoYXZlIGxpa2VseSBleHBvc2VkIHlvdXIgRWxhc3RpY3NlYXJjaCBjbHVzdGVyIGRpcmVjdCB0byB0aGUgaW50ZXJuZXQuCiAgICAgICAgICAgICAgRWxhc3RpY3NlYXJjaCBkb2VzIG5vdCBpbXBsZW1lbnQgYW55IHNlY3VyaXR5IGZvciBwdWJsaWMgZmFjaW5nIGNsdXN0ZXJzIGJ5IGRlZmF1bHQuCiAgICAgICAgICAgICAgQXMgYSBtaW5pbXVtIGxldmVsIG9mIHNlY3VyaXR5OyBzd2l0Y2ggdG8gQ2x1c3RlcklQL05vZGVQb3J0IGFuZCBwbGFjZSBhbiBOZ2lueCBnYXRld2F5IGluZnJvbnQgb2YgdGhlIGNsdXN0ZXIgaW4gb3JkZXIgdG8gbG9jayBkb3duIGFjY2VzcyB0byBkYW5nZXJvdXMgSFRUUCBlbmRwb2ludHMgYW5kIHZlcmJzLgoKICAgICBOT1RFOiBJdCBtYXkgdGFrZSBhIGZldyBtaW51dGVzIGZvciB0aGUgTG9hZEJhbGFuY2VyIElQIHRvIGJlIGF2YWlsYWJsZS4KICAgICAgICAgICBZb3UgY2FuIHdhdGNoIHRoZSBzdGF0dXMgb2YgYnkgcnVubmluZyAna3ViZWN0bCBnZXQgc3ZjIC13IHt7IHRlbXBsYXRlICJlbGFzdGljc2VhcmNoLmNsaWVudC5mdWxsbmFtZSIgLiB9fScKCiAgICBleHBvcnQgU0VSVklDRV9JUD0kKGt1YmVjdGwgZ2V0IHN2YyAtLW5hbWVzcGFjZSB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0ge3sgdGVtcGxhdGUgImVsYXN0aWNzZWFyY2guY2xpZW50LmZ1bGxuYW1lIiAuIH19IC1vIGpzb25wYXRoPSd7LnN0YXR1cy5sb2FkQmFsYW5jZXIuaW5ncmVzc1swXS5pcH0nKQogICAgZWNobyBodHRwOi8vJFNFUlZJQ0VfSVA6OTIwMAogICAge3stIGVsc2UgaWYgY29udGFpbnMgIkNsdXN0ZXJJUCIgIC5WYWx1ZXMuY2xpZW50LnNlcnZpY2VUeXBlIH19CgogICAgZXhwb3J0IFBPRF9OQU1FPSQoa3ViZWN0bCBnZXQgcG9kcyAtLW5hbWVzcGFjZSB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfX0gLWwgImFwcD17eyB0ZW1wbGF0ZSAiZWxhc3RpY3NlYXJjaC5uYW1lIiAuIH19LGNvbXBvbmVudD17eyAuVmFsdWVzLmNsaWVudC5uYW1lIH19LHJlbGVhc2U9e3sgLlJlbGVhc2UuTmFtZSB9fSIgLW8ganNvbnBhdGg9InsuaXRlbXNbMF0ubWV0YWRhdGEubmFtZX0iKQogICAgZWNobyAiVmlzaXQgaHR0cDovLzEyNy4wLjAuMTo5MjAwIHRvIHVzZSBFbGFzdGljc2VhcmNoIgogICAga3ViZWN0bCBwb3J0LWZvcndhcmQgLS1uYW1lc3BhY2Uge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19ICRQT0RfTkFNRSA5MjAwOjkyMDAKICAgIHt7LSBlbmQgfX0K"},{"name":"templates/_helpers.tpl","data":"e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQp7ey8qCkV4cGFuZCB0aGUgbmFtZSBvZiB0aGUgY2hhcnQuCiovfX0Ke3stIGRlZmluZSAiZWxhc3RpY3NlYXJjaC5uYW1lIiAtfX0Ke3stIGRlZmF1bHQgLkNoYXJ0Lk5hbWUgLlZhbHVlcy5uYW1lT3ZlcnJpZGUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZW5kIC19fQoKe3svKgpDcmVhdGUgYSBkZWZhdWx0IGZ1bGx5IHF1YWxpZmllZCBhcHAgbmFtZS4KV2UgdHJ1bmNhdGUgYXQgNjMgY2hhcnMgYmVjYXVzZSBzb21lIEt1YmVybmV0ZXMgbmFtZSBmaWVsZHMgYXJlIGxpbWl0ZWQgdG8gdGhpcyAoYnkgdGhlIEROUyBuYW1pbmcgc3BlYykuCiovfX0Ke3stIGRlZmluZSAiZWxhc3RpY3NlYXJjaC5mdWxsbmFtZSIgLX19Cnt7LSBpZiAuVmFsdWVzLmZ1bGxuYW1lT3ZlcnJpZGUgLX19Cnt7LSAuVmFsdWVzLmZ1bGxuYW1lT3ZlcnJpZGUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZWxzZSAtfX0Ke3stICRuYW1lIDo9IGRlZmF1bHQgLkNoYXJ0Lk5hbWUgLlZhbHVlcy5uYW1lT3ZlcnJpZGUgLX19Cnt7LSBpZiBjb250YWlucyAkbmFtZSAuUmVsZWFzZS5OYW1lIC19fQp7ey0gLlJlbGVhc2UuTmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbHNlIC19fQp7ey0gcHJpbnRmICIlcy0lcyIgLlJlbGVhc2UuTmFtZSAkbmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cgp7ey8qCkNyZWF0ZSBhIGRlZmF1bHQgZnVsbHkgcXVhbGlmaWVkIGNsaWVudCBuYW1lLgpXZSB0cnVuY2F0ZSBhdCA2MyBjaGFycyBiZWNhdXNlIHNvbWUgS3ViZXJuZXRlcyBuYW1lIGZpZWxkcyBhcmUgbGltaXRlZCB0byB0aGlzIChieSB0aGUgRE5TIG5hbWluZyBzcGVjKS4KKi99fQp7ey0gZGVmaW5lICJlbGFzdGljc2VhcmNoLmNsaWVudC5mdWxsbmFtZSIgLX19Cnt7IHRlbXBsYXRlICJlbGFzdGljc2VhcmNoLmZ1bGxuYW1lIiAuIH19LXt7IC5WYWx1ZXMuY2xpZW50Lm5hbWUgfX0Ke3stIGVuZCAtfX0KCnt7LyoKQ3JlYXRlIGEgZGVmYXVsdCBmdWxseSBxdWFsaWZpZWQgZGF0YSBuYW1lLgpXZSB0cnVuY2F0ZSBhdCA2MyBjaGFycyBiZWNhdXNlIHNvbWUgS3ViZXJuZXRlcyBuYW1lIGZpZWxkcyBhcmUgbGltaXRlZCB0byB0aGlzIChieSB0aGUgRE5TIG5hbWluZyBzcGVjKS4KKi99fQp7ey0gZGVmaW5lICJlbGFzdGljc2VhcmNoLmRhdGEuZnVsbG5hbWUiIC19fQp7eyB0ZW1wbGF0ZSAiZWxhc3RpY3NlYXJjaC5mdWxsbmFtZSIgLiB9fS17eyAuVmFsdWVzLmRhdGEubmFtZSB9fQp7ey0gZW5kIC19fQoKe3svKgpDcmVhdGUgYSBkZWZhdWx0IGZ1bGx5IHF1YWxpZmllZCBtYXN0ZXIgbmFtZS4KV2UgdHJ1bmNhdGUgYXQgNjMgY2hhcnMgYmVjYXVzZSBzb21lIEt1YmVybmV0ZXMgbmFtZSBmaWVsZHMgYXJlIGxpbWl0ZWQgdG8gdGhpcyAoYnkgdGhlIEROUyBuYW1pbmcgc3BlYykuCiovfX0Ke3stIGRlZmluZSAiZWxhc3RpY3NlYXJjaC5tYXN0ZXIuZnVsbG5hbWUiIC19fQp7eyB0ZW1wbGF0ZSAiZWxhc3RpY3NlYXJjaC5mdWxsbmFtZSIgLiB9fS17eyAuVmFsdWVzLm1hc3Rlci5uYW1lIH19Cnt7LSBlbmQgLX19Cgp7ey8qCkNyZWF0ZSB0aGUgbmFtZSBvZiB0aGUgc2VydmljZSBhY2NvdW50IHRvIHVzZSBmb3IgdGhlIGNsaWVudCBjb21wb25lbnQKKi99fQp7ey0gZGVmaW5lICJlbGFzdGljc2VhcmNoLnNlcnZpY2VBY2NvdW50TmFtZS5jbGllbnQiIC19fQp7ey0gaWYgLlZhbHVlcy5zZXJ2aWNlQWNjb3VudHMuY2xpZW50LmNyZWF0ZSAtfX0KICAgIHt7IGRlZmF1bHQgKGluY2x1ZGUgImVsYXN0aWNzZWFyY2guY2xpZW50LmZ1bGxuYW1lIiAuKSAuVmFsdWVzLnNlcnZpY2VBY2NvdW50cy5jbGllbnQubmFtZSB9fQp7ey0gZWxzZSAtfX0KICAgIHt7IGRlZmF1bHQgImRlZmF1bHQiIC5WYWx1ZXMuc2VydmljZUFjY291bnRzLmNsaWVudC5uYW1lIH19Cnt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cgp7ey8qCkNyZWF0ZSB0aGUgbmFtZSBvZiB0aGUgc2VydmljZSBhY2NvdW50IHRvIHVzZSBmb3IgdGhlIGRhdGEgY29tcG9uZW50CiovfX0Ke3stIGRlZmluZSAiZWxhc3RpY3NlYXJjaC5zZXJ2aWNlQWNjb3VudE5hbWUuZGF0YSIgLX19Cnt7LSBpZiAuVmFsdWVzLnNlcnZpY2VBY2NvdW50cy5kYXRhLmNyZWF0ZSAtfX0KICAgIHt7IGRlZmF1bHQgKGluY2x1ZGUgImVsYXN0aWNzZWFyY2guZGF0YS5mdWxsbmFtZSIgLikgLlZhbHVlcy5zZXJ2aWNlQWNjb3VudHMuZGF0YS5uYW1lIH19Cnt7LSBlbHNlIC19fQogICAge3sgZGVmYXVsdCAiZGVmYXVsdCIgLlZhbHVlcy5zZXJ2aWNlQWNjb3VudHMuZGF0YS5uYW1lIH19Cnt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cgp7ey8qCkNyZWF0ZSB0aGUgbmFtZSBvZiB0aGUgc2VydmljZSBhY2NvdW50IHRvIHVzZSBmb3IgdGhlIG1hc3RlciBjb21wb25lbnQKKi99fQp7ey0gZGVmaW5lICJlbGFzdGljc2VhcmNoLnNlcnZpY2VBY2NvdW50TmFtZS5tYXN0ZXIiIC19fQp7ey0gaWYgLlZhbHVlcy5zZXJ2aWNlQWNjb3VudHMubWFzdGVyLmNyZWF0ZSAtfX0KICAgIHt7IGRlZmF1bHQgKGluY2x1ZGUgImVsYXN0aWNzZWFyY2gubWFzdGVyLmZ1bGxuYW1lIiAuKSAuVmFsdWVzLnNlcnZpY2VBY2NvdW50cy5tYXN0ZXIubmFtZSB9fQp7ey0gZWxzZSAtfX0KICAgIHt7IGRlZmF1bHQgImRlZmF1bHQiIC5WYWx1ZXMuc2VydmljZUFjY291bnRzLm1hc3Rlci5uYW1lIH19Cnt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cgp7ey8qCnBsdWdpbiBpbnN0YWxsZXIgdGVtcGxhdGUKKi99fQp7ey0gZGVmaW5lICJwbHVnaW4taW5zdGFsbGVyIiAtfX0KLSBuYW1lOiBlcy1wbHVnaW4taW5zdGFsbAogIGltYWdlOiAie3sgLlZhbHVlcy5pbWFnZS5yZXBvc2l0b3J5IH19Ont7IC5WYWx1ZXMuaW1hZ2UudGFnIH19IgogIGltYWdlUHVsbFBvbGljeToge3sgLlZhbHVlcy5pbWFnZS5wdWxsUG9saWN5IH19CiAgc2VjdXJpdHlDb250ZXh0OgogICAgY2FwYWJpbGl0aWVzOgogICAgICBhZGQ6CiAgICAgICAgLSBJUENfTE9DSwogICAgICAgIC0gU1lTX1JFU09VUkNFCiAgY29tbWFuZDoKICAgIC0gInNoIgogICAgLSAiLWMiCiAgICAtIHwKICAgICAge3stIHJhbmdlIC5WYWx1ZXMuY2x1c3Rlci5wbHVnaW5zIH19CiAgICAgIFBMVUdJTl9OQU1FPSJ7eyAuIH19IgogICAgICBlY2hvICJJbnN0YWxsaW5nICRQTFVHSU5fTkFNRS4uLiIKICAgICAgaWYgL3Vzci9zaGFyZS9lbGFzdGljc2VhcmNoL2Jpbi9lbGFzdGljc2VhcmNoLXBsdWdpbiBsaXN0IHwgZ3JlcCAiJFBMVUdJTl9OQU1FIiA+IC9kZXYvbnVsbDsgdGhlbgogICAgICAgIGVjaG8gIlBsdWdpbiAkUExVR0lOX05BTUUgYWxyZWFkeSBleGlzdHMsIHNraXBwaW5nLiIKICAgICAgZWxzZQogICAgICAgIC91c3Ivc2hhcmUvZWxhc3RpY3NlYXJjaC9iaW4vZWxhc3RpY3NlYXJjaC1wbHVnaW4gaW5zdGFsbCAtYiAkUExVR0lOX05BTUUKICAgICAgZmkKICAgICAge3stIGVuZCB9fQogIHZvbHVtZU1vdW50czoKICAtIG1vdW50UGF0aDogL3Vzci9zaGFyZS9lbGFzdGljc2VhcmNoL3BsdWdpbnMvCiAgICBuYW1lOiBwbHVnaW5kaXIKICAtIG1vdW50UGF0aDogL3Vzci9zaGFyZS9lbGFzdGljc2VhcmNoL2NvbmZpZy9lbGFzdGljc2VhcmNoLnltbAogICAgbmFtZTogY29uZmlnCiAgICBzdWJQYXRoOiBlbGFzdGljc2VhcmNoLnltbAp7ey0gZW5kIC19fQo="},{"name":"templates/client-auth.yaml","data":"e3stIGlmIGFuZCAoIC5WYWx1ZXMuY2xpZW50LmluZ3Jlc3MudXNlciApICggLlZhbHVlcy5jbGllbnQuaW5ncmVzcy5wYXNzd29yZCApIH19Ci0tLQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZWNyZXQKbWV0YWRhdGE6CiAgbmFtZTogJ3t7IGluY2x1ZGUgImVsYXN0aWNzZWFyY2guY2xpZW50LmZ1bGxuYW1lIiAuIH19LWF1dGgnCnR5cGU6IE9wYXF1ZQpkYXRhOgogIGF1dGg6IHt7IHByaW50ZiAiJXM6e1BMQUlOfSVzXG4iIC5WYWx1ZXMuY2xpZW50LmluZ3Jlc3MudXNlciAuVmFsdWVzLmNsaWVudC5pbmdyZXNzLnBhc3N3b3JkIHwgYjY0ZW5jIHwgcXVvdGUgfX0Ke3stIGVuZCB9fQoK"},{"name":"templates/client-deployment.yaml","data":""},{"name":"templates/client-ingress.yaml","data":"e3stIGlmIC5WYWx1ZXMuY2xpZW50LmluZ3Jlc3MuZW5hYmxlZCAtfX0Ke3stICRmdWxsTmFtZSA6PSBpbmNsdWRlICJlbGFzdGljc2VhcmNoLmNsaWVudC5mdWxsbmFtZSIgLiAtfX0Ke3stICRpbmdyZXNzUGF0aCA6PSAuVmFsdWVzLmNsaWVudC5pbmdyZXNzLnBhdGggLX19CmFwaVZlcnNpb246IGV4dGVuc2lvbnMvdjFiZXRhMQpraW5kOiBJbmdyZXNzCm1ldGFkYXRhOgogIG5hbWU6IHt7ICRmdWxsTmFtZSB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImVsYXN0aWNzZWFyY2gubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIH19CiAgICBjb21wb25lbnQ6ICJ7eyAuVmFsdWVzLmNsaWVudC5uYW1lIH19IgogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICBhbm5vdGF0aW9uczoKe3stIHdpdGggLlZhbHVlcy5jbGllbnQuaW5ncmVzcy5hbm5vdGF0aW9ucyB9fQp7eyB0b1lhbWwgLiB8IGluZGVudCA0IH19Cnt7LSBlbmQgfX0Ke3stIGlmIGFuZCAoIC5WYWx1ZXMuY2xpZW50LmluZ3Jlc3MudXNlciApICggLlZhbHVlcy5jbGllbnQuaW5ncmVzcy5wYXNzd29yZCApIH19CiAgICBuZ2lueC5pbmdyZXNzLmt1YmVybmV0ZXMuaW8vYXV0aC10eXBlOiBiYXNpYwogICAgbmdpbnguaW5ncmVzcy5rdWJlcm5ldGVzLmlvL2F1dGgtc2VjcmV0OiAne3sgaW5jbHVkZSAiZWxhc3RpY3NlYXJjaC5jbGllbnQuZnVsbG5hbWUiIC4gfX0tYXV0aCcKICAgIG5naW54LmluZ3Jlc3Mua3ViZXJuZXRlcy5pby9hdXRoLXJlYWxtOiAiQXV0aGVudGljYXRpb24tUmVxdWlyZWQiCnt7LSBlbmQgfX0Kc3BlYzoKe3stIGlmIC5WYWx1ZXMuY2xpZW50LmluZ3Jlc3MudGxzIH19CiAgdGxzOgogIHt7LSByYW5nZSAuVmFsdWVzLmNsaWVudC5pbmdyZXNzLnRscyB9fQogICAgLSBob3N0czoKICAgICAge3stIHJhbmdlIC5ob3N0cyB9fQogICAgICAgIC0ge3sgLiB8IHF1b3RlIH19CiAgICAgIHt7LSBlbmQgfX0KICAgICAgc2VjcmV0TmFtZToge3sgLnNlY3JldE5hbWUgfX0KICB7ey0gZW5kIH19Cnt7LSBlbmQgfX0KICBydWxlczoKICB7ey0gcmFuZ2UgLlZhbHVlcy5jbGllbnQuaW5ncmVzcy5ob3N0cyB9fQogICAgLSBob3N0OiB7eyAuIHwgcXVvdGUgfX0KICAgICAgaHR0cDoKICAgICAgICBwYXRoczoKICAgICAgICAgIC0gcGF0aDoge3sgJGluZ3Jlc3NQYXRoIH19CiAgICAgICAgICAgIGJhY2tlbmQ6CiAgICAgICAgICAgICAgc2VydmljZU5hbWU6IHt7ICRmdWxsTmFtZSB9fQogICAgICAgICAgICAgIHNlcnZpY2VQb3J0OiBodHRwCiAge3stIGVuZCB9fQp7ey0gZW5kIH19Cg=="},{"name":"templates/client-pdb.yaml","data":"e3stIGlmIC5WYWx1ZXMuY2xpZW50LnBvZERpc3J1cHRpb25CdWRnZXQuZW5hYmxlZCB9fQphcGlWZXJzaW9uOiBwb2xpY3kvdjFiZXRhMQpraW5kOiBQb2REaXNydXB0aW9uQnVkZ2V0Cm1ldGFkYXRhOgogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImVsYXN0aWNzZWFyY2gubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIH19CiAgICBjb21wb25lbnQ6ICJ7eyAuVmFsdWVzLmNsaWVudC5uYW1lIH19IgogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICBuYW1lOiB7eyB0ZW1wbGF0ZSAiZWxhc3RpY3NlYXJjaC5jbGllbnQuZnVsbG5hbWUiIC4gfX0Kc3BlYzoKe3stIGlmIC5WYWx1ZXMuY2xpZW50LnBvZERpc3J1cHRpb25CdWRnZXQubWluQXZhaWxhYmxlIH19CiAgbWluQXZhaWxhYmxlOiB7eyAuVmFsdWVzLmNsaWVudC5wb2REaXNydXB0aW9uQnVkZ2V0Lm1pbkF2YWlsYWJsZSB9fQp7ey0gZW5kIH19Cnt7LSBpZiAuVmFsdWVzLmNsaWVudC5wb2REaXNydXB0aW9uQnVkZ2V0Lm1heFVuYXZhaWxhYmxlIH19CiAgbWF4VW5hdmFpbGFibGU6IHt7IC5WYWx1ZXMuY2xpZW50LnBvZERpc3J1cHRpb25CdWRnZXQubWF4VW5hdmFpbGFibGUgfX0Ke3stIGVuZCB9fQogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIGFwcDoge3sgdGVtcGxhdGUgImVsYXN0aWNzZWFyY2gubmFtZSIgLiB9fQogICAgICBjb21wb25lbnQ6ICJ7eyAuVmFsdWVzLmNsaWVudC5uYW1lIH19IgogICAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19Cnt7LSBlbmQgfX0K"},{"name":"templates/client-serviceaccount.yaml","data":"e3stIGlmIC5WYWx1ZXMuc2VydmljZUFjY291bnRzLmNsaWVudC5jcmVhdGUgfX0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAiZWxhc3RpY3NlYXJjaC5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfX0KICAgIGNvbXBvbmVudDogInt7IC5WYWx1ZXMuY2xpZW50Lm5hbWUgfX0iCiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogIG5hbWU6IHt7IHRlbXBsYXRlICJlbGFzdGljc2VhcmNoLmNsaWVudC5mdWxsbmFtZSIgLiB9fQp7ey0gZW5kIH19Cg=="},{"name":"templates/client-svc.yaml","data":"YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJlbGFzdGljc2VhcmNoLm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB9fQogICAgY29tcG9uZW50OiAie3sgLlZhbHVlcy5jbGllbnQubmFtZSB9fSIKICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgbmFtZToge3sgdGVtcGxhdGUgImVsYXN0aWNzZWFyY2guY2xpZW50LmZ1bGxuYW1lIiAuIH19Cnt7LSBpZiAuVmFsdWVzLmNsaWVudC5zZXJ2aWNlQW5ub3RhdGlvbnMgfX0KICBhbm5vdGF0aW9uczoKe3sgdG9ZYW1sIC5WYWx1ZXMuY2xpZW50LnNlcnZpY2VBbm5vdGF0aW9ucyB8IGluZGVudCA0IH19Cnt7LSBlbmQgfX0KCnNwZWM6CiAgcG9ydHM6CiAgICAtIG5hbWU6IGh0dHAKICAgICAgcG9ydDogOTIwMAp7ey0gaWYgYW5kIC5WYWx1ZXMuY2xpZW50Lmh0dHBOb2RlUG9ydCAoZXEgLlZhbHVlcy5jbGllbnQuc2VydmljZVR5cGUgIk5vZGVQb3J0IikgfX0KICAgICAgbm9kZVBvcnQ6IHt7IC5WYWx1ZXMuY2xpZW50Lmh0dHBOb2RlUG9ydCB9fQp7ey0gZW5kIH19CiAgICAgIHRhcmdldFBvcnQ6IGh0dHAKe3stIGlmIC5WYWx1ZXMuY2xpZW50LmV4cG9zZVRyYW5zcG9ydFBvcnQgfX0KICAgIC0gbmFtZTogdHJhbnNwb3J0CiAgICAgIHBvcnQ6IDkzMDAKICAgICAgdGFyZ2V0UG9ydDogdHJhbnNwb3J0Cnt7LSBlbmQgfX0KICBzZWxlY3RvcjoKICAgIGFwcDoge3sgdGVtcGxhdGUgImVsYXN0aWNzZWFyY2gubmFtZSIgLiB9fQogICAgY29tcG9uZW50OiAie3sgLlZhbHVlcy5jbGllbnQubmFtZSB9fSIKICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICB0eXBlOiB7eyAuVmFsdWVzLmNsaWVudC5zZXJ2aWNlVHlwZSB9fQp7ey0gaWYgLlZhbHVlcy5jbGllbnQubG9hZEJhbGFuY2VySVAgfX0KICBsb2FkQmFsYW5jZXJJUDogInt7IC5WYWx1ZXMuY2xpZW50LmxvYWRCYWxhbmNlcklQIH19Igp7ey0gZW5kIH19CiAge3tpZiAuVmFsdWVzLmNsaWVudC5sb2FkQmFsYW5jZXJTb3VyY2VSYW5nZXN9fQogIGxvYWRCYWxhbmNlclNvdXJjZVJhbmdlczoKICAgIHt7cmFuZ2UgJHJhbmdlTGlzdCA6PSAuVmFsdWVzLmNsaWVudC5sb2FkQmFsYW5jZXJTb3VyY2VSYW5nZXN9fQogICAgLSB7eyAkcmFuZ2VMaXN0IH19CiAgICB7e2VuZH19CiAge3tlbmR9fQ=="},{"name":"templates/configmap.yaml","data":""},{"name":"templates/data-pdb.yaml","data":"e3stIGlmIC5WYWx1ZXMuZGF0YS5wb2REaXNydXB0aW9uQnVkZ2V0LmVuYWJsZWQgfX0KYXBpVmVyc2lvbjogcG9saWN5L3YxYmV0YTEKa2luZDogUG9kRGlzcnVwdGlvbkJ1ZGdldAptZXRhZGF0YToKICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJlbGFzdGljc2VhcmNoLm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB9fQogICAgY29tcG9uZW50OiAie3sgLlZhbHVlcy5kYXRhLm5hbWUgfX0iCiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogIG5hbWU6IHt7IHRlbXBsYXRlICJlbGFzdGljc2VhcmNoLmRhdGEuZnVsbG5hbWUiIC4gfX0Kc3BlYzoKe3stIGlmIC5WYWx1ZXMuZGF0YS5wb2REaXNydXB0aW9uQnVkZ2V0Lm1pbkF2YWlsYWJsZSB9fQogIG1pbkF2YWlsYWJsZToge3sgLlZhbHVlcy5kYXRhLnBvZERpc3J1cHRpb25CdWRnZXQubWluQXZhaWxhYmxlIH19Cnt7LSBlbmQgfX0Ke3stIGlmIC5WYWx1ZXMuZGF0YS5wb2REaXNydXB0aW9uQnVkZ2V0Lm1heFVuYXZhaWxhYmxlIH19CiAgbWF4VW5hdmFpbGFibGU6IHt7IC5WYWx1ZXMuZGF0YS5wb2REaXNydXB0aW9uQnVkZ2V0Lm1heFVuYXZhaWxhYmxlIH19Cnt7LSBlbmQgfX0KICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHA6IHt7IHRlbXBsYXRlICJlbGFzdGljc2VhcmNoLm5hbWUiIC4gfX0KICAgICAgY29tcG9uZW50OiAie3sgLlZhbHVlcy5kYXRhLm5hbWUgfX0iCiAgICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0Ke3stIGVuZCB9fQo="},{"name":"templates/data-serviceaccount.yaml","data":"e3stIGlmIC5WYWx1ZXMuc2VydmljZUFjY291bnRzLmRhdGEuY3JlYXRlIH19CmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImVsYXN0aWNzZWFyY2gubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIH19CiAgICBjb21wb25lbnQ6ICJ7eyAuVmFsdWVzLmRhdGEubmFtZSB9fSIKICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgbmFtZToge3sgdGVtcGxhdGUgImVsYXN0aWNzZWFyY2guZGF0YS5mdWxsbmFtZSIgLiB9fQp7ey0gZW5kIH19Cg=="},{"name":"templates/data-statefulset.yaml","data":""},{"name":"templates/job.yaml","data":"e3stIGlmIC5WYWx1ZXMuY2x1c3Rlci5ib290c3RyYXBTaGVsbENvbW1hbmQgfX0KYXBpVmVyc2lvbjogYmF0Y2gvdjEKa2luZDogSm9iCm1ldGFkYXRhOgogIG5hbWU6IHt7IHRlbXBsYXRlICJlbGFzdGljc2VhcmNoLmZ1bGxuYW1lIiAuIH19LWJvb3RzdHJhcAogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImVsYXN0aWNzZWFyY2gubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIHwgcmVwbGFjZSAiKyIgIl8iIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogIGFubm90YXRpb25zOgogICAgImhlbG0uc2gvaG9vayI6IHBvc3QtaW5zdGFsbCxwb3N0LXVwZ3JhZGUKICAgICJoZWxtLnNoL2hvb2std2VpZ2h0IjogIjEwIgogICAgImhlbG0uc2gvaG9vay1kZWxldGUtcG9saWN5IjogaG9vay1zdWNjZWVkZWQKc3BlYzoKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBuYW1lOiB7eyB0ZW1wbGF0ZSAiZWxhc3RpY3NlYXJjaC5mdWxsbmFtZSIgLiB9fS1ib290c3RyYXAKICAgICAgbGFiZWxzOgogICAgICAgIGFwcDoge3sgdGVtcGxhdGUgImVsYXN0aWNzZWFyY2gubmFtZSIgLiB9fQogICAgICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB8IHJlcGxhY2UgIisiICJfIiB9fQogICAgICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgICAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgc3BlYzoKICAgICAgY29udGFpbmVyczoKICAgICAgLSBuYW1lOiBib290c3RyYXAtZWxhc3RpY3NlYXJjaAogICAgICAgIGltYWdlOiBieXJuZWRvL2FscGluZS1jdXJsCiAgICAgICAgY29tbWFuZDoKICAgICAgICAtICJzaCIKICAgICAgICAtICItYyIKICAgICAgICAtIHt7IC5WYWx1ZXMuY2x1c3Rlci5ib290c3RyYXBTaGVsbENvbW1hbmQgfCBxdW90ZSB9fQogICAgICByZXN0YXJ0UG9saWN5OiBOZXZlcgogIGJhY2tvZmZMaW1pdDogMjAKe3stIGVuZCB9fQo="},{"name":"templates/master-pdb.yaml","data":"e3stIGlmIC5WYWx1ZXMubWFzdGVyLnBvZERpc3J1cHRpb25CdWRnZXQuZW5hYmxlZCB9fQphcGlWZXJzaW9uOiBwb2xpY3kvdjFiZXRhMQpraW5kOiBQb2REaXNydXB0aW9uQnVkZ2V0Cm1ldGFkYXRhOgogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImVsYXN0aWNzZWFyY2gubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIH19CiAgICBjb21wb25lbnQ6ICJ7eyAuVmFsdWVzLm1hc3Rlci5uYW1lIH19IgogICAgaGVyaXRhZ2U6IHt7IC5SZWxlYXNlLlNlcnZpY2UgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICBuYW1lOiB7eyB0ZW1wbGF0ZSAiZWxhc3RpY3NlYXJjaC5tYXN0ZXIuZnVsbG5hbWUiIC4gfX0Kc3BlYzoKe3stIGlmIC5WYWx1ZXMubWFzdGVyLnBvZERpc3J1cHRpb25CdWRnZXQubWluQXZhaWxhYmxlIH19CiAgbWluQXZhaWxhYmxlOiB7eyAuVmFsdWVzLm1hc3Rlci5wb2REaXNydXB0aW9uQnVkZ2V0Lm1pbkF2YWlsYWJsZSB9fQp7ey0gZW5kIH19Cnt7LSBpZiAuVmFsdWVzLm1hc3Rlci5wb2REaXNydXB0aW9uQnVkZ2V0Lm1heFVuYXZhaWxhYmxlIH19CiAgbWF4VW5hdmFpbGFibGU6IHt7IC5WYWx1ZXMubWFzdGVyLnBvZERpc3J1cHRpb25CdWRnZXQubWF4VW5hdmFpbGFibGUgfX0Ke3stIGVuZCB9fQogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIGFwcDoge3sgdGVtcGxhdGUgImVsYXN0aWNzZWFyY2gubmFtZSIgLiB9fQogICAgICBjb21wb25lbnQ6ICJ7eyAuVmFsdWVzLm1hc3Rlci5uYW1lIH19IgogICAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19Cnt7LSBlbmQgfX0K"},{"name":"templates/master-serviceaccount.yaml","data":"e3stIGlmIC5WYWx1ZXMuc2VydmljZUFjY291bnRzLm1hc3Rlci5jcmVhdGUgfX0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbGFiZWxzOgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAiZWxhc3RpY3NlYXJjaC5uYW1lIiAuIH19CiAgICBjaGFydDoge3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfX0KICAgIGNvbXBvbmVudDogInt7IC5WYWx1ZXMubWFzdGVyLm5hbWUgfX0iCiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogIG5hbWU6IHt7IHRlbXBsYXRlICJlbGFzdGljc2VhcmNoLm1hc3Rlci5mdWxsbmFtZSIgLiB9fQp7ey0gZW5kIH19Cg=="},{"name":"templates/master-statefulset.yaml","data":""},{"name":"templates/master-svc.yaml","data":"YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJlbGFzdGljc2VhcmNoLm5hbWUiIC4gfX0KICAgIGNoYXJ0OiB7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB9fQogICAgY29tcG9uZW50OiAie3sgLlZhbHVlcy5tYXN0ZXIubmFtZSB9fSIKICAgIGhlcml0YWdlOiB7eyAuUmVsZWFzZS5TZXJ2aWNlIH19CiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19CiAgbmFtZToge3sgdGVtcGxhdGUgImVsYXN0aWNzZWFyY2guZnVsbG5hbWUiIC4gfX0tZGlzY292ZXJ5CnNwZWM6CiAgY2x1c3RlcklQOiBOb25lCiAgcG9ydHM6CiAgICAtIHBvcnQ6IDkzMDAKICAgICAgdGFyZ2V0UG9ydDogdHJhbnNwb3J0CiAgc2VsZWN0b3I6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJlbGFzdGljc2VhcmNoLm5hbWUiIC4gfX0KICAgIGNvbXBvbmVudDogInt7IC5WYWx1ZXMubWFzdGVyLm5hbWUgfX0iCiAgICByZWxlYXNlOiB7eyAuUmVsZWFzZS5OYW1lIH19Cg=="},{"name":"templates/podsecuritypolicy.yaml","data":"e3stIGlmIC5WYWx1ZXMucG9kU2VjdXJpdHlQb2xpY3kuZW5hYmxlZCB9fQphcGlWZXJzaW9uOiBwb2xpY3kvdjFiZXRhMQpraW5kOiBQb2RTZWN1cml0eVBvbGljeQptZXRhZGF0YToKICBuYW1lOiB7eyB0ZW1wbGF0ZSAiZWxhc3RpY3NlYXJjaC5mdWxsbmFtZSIgLiB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImVsYXN0aWNzZWFyY2gubmFtZSIgLiB9fQogICAgY2hhcnQ6IHt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIH19CiAgICBoZXJpdGFnZToge3sgLlJlbGVhc2UuU2VydmljZSB9fQogICAgcmVsZWFzZToge3sgLlJlbGVhc2UuTmFtZSB9fQogIGFubm90YXRpb25zOgp7ey0gaWYgLlZhbHVlcy5wb2RTZWN1cml0eVBvbGljeS5hbm5vdGF0aW9ucyB9fQp7eyB0b1lhbWwgLlZhbHVlcy5wb2RTZWN1cml0eVBvbGljeS5hbm5vdGF0aW9ucyB8IGluZGVudCA0IH19Cnt7LSBlbmQgfX0Kc3BlYzoKICBwcml2aWxlZ2VkOiB0cnVlCiAgYWxsb3dQcml2aWxlZ2VFc2NhbGF0aW9uOiB0cnVlCiAgdm9sdW1lczoKICAgIC0gJ2NvbmZpZ01hcCcKICAgIC0gJ3NlY3JldCcKICAgIC0gJ2VtcHR5RGlyJwogICAgLSAncGVyc2lzdGVudFZvbHVtZUNsYWltJwogIGhvc3ROZXR3b3JrOiBmYWxzZQogIGhvc3RQSUQ6IGZhbHNlCiAgaG9zdElQQzogZmFsc2UKICBydW5Bc1VzZXI6CiAgICBydWxlOiAnUnVuQXNBbnknCiAgcnVuQXNHcm91cDoKICAgIHJ1bGU6ICdSdW5Bc0FueScKICBzZUxpbnV4OgogICAgcnVsZTogJ1J1bkFzQW55JwogIHN1cHBsZW1lbnRhbEdyb3VwczoKICAgIHJ1bGU6ICdSdW5Bc0FueScKICBmc0dyb3VwOgogICAgcnVsZTogJ011c3RSdW5BcycKICAgIHJhbmdlczoKICAgICAgLSBtaW46IDEwMDAKICAgICAgICBtYXg6IDEwMDAKICByZWFkT25seVJvb3RGaWxlc3lzdGVtOiBmYWxzZQogIGhvc3RQb3J0czoKICAgIC0gbWluOiAxCiAgICAgIG1heDogNjU1MzUKe3stIGVuZCB9fQo="},{"name":"templates/role.yaml","data":"e3stIGlmIC5WYWx1ZXMucG9kU2VjdXJpdHlQb2xpY3kuZW5hYmxlZCB9fQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxYmV0YTEKa2luZDogUm9sZQptZXRhZGF0YToKICBuYW1lOiB7eyB0ZW1wbGF0ZSAiZWxhc3RpY3NlYXJjaC5mdWxsbmFtZSIgLiB9fQogIGxhYmVsczoKICAgIGFwcDoge3sgdGVtcGxhdGUgImVsYXN0aWNzZWFyY2gubmFtZSIgLiB9fQogICAgY2hhcnQ6ICJ7eyAuQ2hhcnQuTmFtZSB9fS17eyAuQ2hhcnQuVmVyc2lvbiB9fSIKICAgIHJlbGVhc2U6ICJ7eyAuUmVsZWFzZS5OYW1lIH19IgogICAgaGVyaXRhZ2U6ICJ7eyAuUmVsZWFzZS5TZXJ2aWNlIH19IgpydWxlczoKLSBhcGlHcm91cHM6IFsnZXh0ZW5zaW9ucyddCiAgcmVzb3VyY2VzOiBbJ3BvZHNlY3VyaXR5cG9saWNpZXMnXQogIHZlcmJzOiAgICAgWyd1c2UnXQogIHJlc291cmNlTmFtZXM6CiAgLSB7eyB0ZW1wbGF0ZSAiZWxhc3RpY3NlYXJjaC5mdWxsbmFtZSIgLiB9fQp7ey0gZW5kIH19Cg=="},{"name":"templates/rolebinding.yaml","data":"e3stIGlmIC5WYWx1ZXMucG9kU2VjdXJpdHlQb2xpY3kuZW5hYmxlZCB9fQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxYmV0YTEKa2luZDogUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZToge3sgdGVtcGxhdGUgImVsYXN0aWNzZWFyY2guZnVsbG5hbWUiIC4gfX0KICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJlbGFzdGljc2VhcmNoLm5hbWUiIC4gfX0KICAgIGNoYXJ0OiAie3sgLkNoYXJ0Lk5hbWUgfX0te3sgLkNoYXJ0LlZlcnNpb24gfX0iCiAgICByZWxlYXNlOiAie3sgLlJlbGVhc2UuTmFtZSB9fSIKICAgIGhlcml0YWdlOiAie3sgLlJlbGVhc2UuU2VydmljZSB9fSIKcm9sZVJlZjoKICBraW5kOiBSb2xlCiAgbmFtZToge3sgdGVtcGxhdGUgImVsYXN0aWNzZWFyY2guZnVsbG5hbWUiIC4gfX0KICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IHt7IHRlbXBsYXRlICJlbGFzdGljc2VhcmNoLnNlcnZpY2VBY2NvdW50TmFtZS5jbGllbnQiIC4gfX0KICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZToge3sgdGVtcGxhdGUgImVsYXN0aWNzZWFyY2guc2VydmljZUFjY291bnROYW1lLmRhdGEiIC4gfX0KICBuYW1lc3BhY2U6IHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fQotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZToge3sgdGVtcGxhdGUgImVsYXN0aWNzZWFyY2guc2VydmljZUFjY291bnROYW1lLm1hc3RlciIgLiB9fQogIG5hbWVzcGFjZToge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19Cnt7LSBlbmQgfX0KCg=="},{"name":"templates/tests/test-configmap.yaml","data":"YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IHt7IHRlbXBsYXRlICJlbGFzdGljc2VhcmNoLmZ1bGxuYW1lIiAuIH19LXRlc3QKICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJlbGFzdGljc2VhcmNoLmZ1bGxuYW1lIiAuIH19CiAgICBjaGFydDogInt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIH19IgogICAgaGVyaXRhZ2U6ICJ7eyAuUmVsZWFzZS5TZXJ2aWNlIH19IgogICAgcmVsZWFzZTogInt7IC5SZWxlYXNlLk5hbWUgfX0iCmRhdGE6CiAgcnVuLnNoOiB8LQogICAgQHRlc3QgIlRlc3QgQWNjZXNzIGFuZCBIZWFsdGgiIHsKICAgICAgY3VybCAtRCAtIGh0dHA6Ly97eyB0ZW1wbGF0ZSAiZWxhc3RpY3NlYXJjaC5jbGllbnQuZnVsbG5hbWUiIC4gfX06OTIwMAogICAgICBjdXJsIC1EIC0gaHR0cDovL3t7IHRlbXBsYXRlICJlbGFzdGljc2VhcmNoLmNsaWVudC5mdWxsbmFtZSIgLiB9fTo5MjAwL19jbHVzdGVyL2hlYWx0aD93YWl0X2Zvcl9zdGF0dXM9Z3JlZW4KICAgIH0K"},{"name":"templates/tests/test.yaml","data":"YXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIG5hbWU6IHt7IHRlbXBsYXRlICJlbGFzdGljc2VhcmNoLmZ1bGxuYW1lIiAuIH19LXRlc3QKICBsYWJlbHM6CiAgICBhcHA6IHt7IHRlbXBsYXRlICJlbGFzdGljc2VhcmNoLmZ1bGxuYW1lIiAuIH19CiAgICBjaGFydDogInt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIH19IgogICAgaGVyaXRhZ2U6ICJ7eyAuUmVsZWFzZS5TZXJ2aWNlIH19IgogICAgcmVsZWFzZTogInt7IC5SZWxlYXNlLk5hbWUgfX0iCiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogdGVzdC1zdWNjZXNzCnNwZWM6Cnt7LSBpZiAuVmFsdWVzLmltYWdlLnB1bGxTZWNyZXRzIH19CiAgaW1hZ2VQdWxsU2VjcmV0czoKICB7ey0gcmFuZ2UgJHB1bGxTZWNyZXQgOj0gLlZhbHVlcy5pbWFnZS5wdWxsU2VjcmV0cyB9fQogICAgLSBuYW1lOiB7eyAkcHVsbFNlY3JldCB9fQogIHt7LSBlbmQgfX0Ke3stIGVuZCB9fQogIGluaXRDb250YWluZXJzOgogICAgLSBuYW1lOiB0ZXN0LWZyYW1ld29yawogICAgICBpbWFnZTogInt7IC5WYWx1ZXMudGVzdEZyYW1ld29yay5pbWFnZX19Ont7IC5WYWx1ZXMudGVzdEZyYW1ld29yay50YWcgfX0iCiAgICAgIGNvbW1hbmQ6CiAgICAgIC0gImJhc2giCiAgICAgIC0gIi1jIgogICAgICAtIHwKICAgICAgICBzZXQgLWV4CiAgICAgICAgIyBjb3B5IGJhdHMgdG8gdG9vbHMgZGlyCiAgICAgICAgY3AgLVIgL3Vzci9sb2NhbC9saWJleGVjLyAvdG9vbHMvYmF0cy8KICAgICAgdm9sdW1lTW91bnRzOgogICAgICAtIG1vdW50UGF0aDogL3Rvb2xzCiAgICAgICAgbmFtZTogdG9vbHMKICBjb250YWluZXJzOgogICAgLSBuYW1lOiB7eyAuUmVsZWFzZS5OYW1lIH19LXRlc3QKICAgICAgaW1hZ2U6ICJ7eyAuVmFsdWVzLnRlc3RGcmFtZXdvcmsuaW1hZ2V9fTp7eyAuVmFsdWVzLnRlc3RGcmFtZXdvcmsudGFnIH19IgogICAgICBjb21tYW5kOiBbIi90b29scy9iYXRzL2JhdHMiLCAiLXQiLCAiL3Rlc3RzL3J1bi5zaCJdCiAgICAgIHZvbHVtZU1vdW50czoKICAgICAgLSBtb3VudFBhdGg6IC90ZXN0cwogICAgICAgIG5hbWU6IHRlc3RzCiAgICAgICAgcmVhZE9ubHk6IHRydWUKICAgICAgLSBtb3VudFBhdGg6IC90b29scwogICAgICAgIG5hbWU6IHRvb2xzCiAgdm9sdW1lczoKICAtIG5hbWU6IHRlc3RzCiAgICBjb25maWdNYXA6CiAgICAgIG5hbWU6IHt7IHRlbXBsYXRlICJlbGFzdGljc2VhcmNoLmZ1bGxuYW1lIiAuIH19LXRlc3QKICAtIG5hbWU6IHRvb2xzCiAgICBlbXB0eURpcjoge30KICByZXN0YXJ0UG9saWN5OiBOZXZlcgo="}],"values":{"appVersion":"6.8.6","chownInitContainer":{"enabled":true},"client":{"antiAffinity":"soft","heapSize":"512m","hooks":{},"ingress":{"annotations":{},"enabled":false,"hosts":["chart-example.local"],"path":"/","tls":[]},"initResources":{},"loadBalancerIP":{},"loadBalancerSourceRanges":{},"name":"client","nodeAffinity":{},"nodeSelector":{},"podDisruptionBudget":{"enabled":false,"minAvailable":1},"priorityClassName":"","replicas":2,"resources":{"limits":{"cpu":"1"},"requests":{"cpu":"25m","memory":"512Mi"}},"serviceType":"ClusterIP","tolerations":[]},"cluster":{"additionalJavaOpts":"","bootstrapShellCommand":"","config":{},"env":{"MINIMUM_MASTER_NODES":"2"},"log4j2Properties":"status = error\nappender.console.type = Console\nappender.console.name = console\nappender.console.layout.type = PatternLayout\nappender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] %marker%m%n\nrootLogger.level = info\nrootLogger.appenderRef.console.ref = console\nlogger.searchguard.name = com.floragunn\nlogger.searchguard.level = info\n","loggingYml":{"appender":{"console":{"layout":{"conversionPattern":"[%d{ISO8601}][%-5p][%-25c] %m%n","type":"consolePattern"},"type":"console"}},"es.logger.level":"INFO","logger":{"action":"DEBUG","com.amazonaws":"WARN"},"rootLogger":"${es.logger.level}, console"},"name":"elasticsearch","plugins":[],"xpackEnable":false},"data":{"antiAffinity":"soft","exposeHttp":false,"heapSize":"1536m","hooks":{"drain":{"enabled":true}},"initResources":{},"name":"data","nodeAffinity":{},"nodeSelector":{},"persistence":{"accessMode":"ReadWriteOnce","enabled":true,"name":"data","size":"30Gi"},"podDisruptionBudget":{"enabled":false,"maxUnavailable":1},"podManagementPolicy":"OrderedReady","priorityClassName":"","readinessProbe":{"httpGet":{"path":"/_cluster/health?local=true","port":9200},"initialDelaySeconds":5},"replicas":2,"resources":{"limits":{"cpu":"1"},"requests":{"cpu":"25m","memory":"1536Mi"}},"terminationGracePeriodSeconds":3600,"tolerations":[],"updateStrategy":{"type":"OnDelete"}},"extraInitContainers":"","forceIpv6":false,"image":{"pullPolicy":"IfNotPresent","repository":"docker.elastic.co/elasticsearch/elasticsearch-oss","tag":"6.8.6"},"initImage":{"pullPolicy":"Always","repository":"busybox","tag":"latest"},"master":{"antiAffinity":"soft","exposeHttp":false,"heapSize":"512m","hooks":{},"initResources":{},"name":"master","nodeAffinity":{},"nodeSelector":{},"persistence":{"accessMode":"ReadWriteOnce","enabled":true,"name":"data","size":"4Gi"},"podDisruptionBudget":{"enabled":false,"minAvailable":2},"podManagementPolicy":"OrderedReady","priorityClassName":"","readinessProbe":{"httpGet":{"path":"/_cluster/health?local=true","port":9200},"initialDelaySeconds":5},"replicas":3,"resources":{"limits":{"cpu":"1"},"requests":{"cpu":"25m","memory":"512Mi"}},"tolerations":[],"updateStrategy":{"type":"OnDelete"}},"podSecurityPolicy":{"annotations":{},"enabled":false},"securityContext":{"enabled":false,"runAsUser":1000},"serviceAccounts":{"client":{"create":true,"name":null},"data":{"create":true,"name":null},"master":{"create":true,"name":null}},"sysctlInitContainer":{"enabled":true},"testFramework":{"image":"dduportal/bats","tag":"0.4.0"}},"schema":null,"files":[{"name":".helmignore","data":"LmdpdAojIE9XTkVSUyBmaWxlIGZvciBLdWJlcm5ldGVzCk9XTkVSUw=="},{"name":"README.md","data":""},{"name":"ci/expose-transport-port-on-service-values.yaml","data":"LS0tCiMgRXhwb3NlIHRyYW5zcG9ydCBwb3J0IG9uIENsdXN0ZXJJUCBzZXJ2aWNlCgpjbGllbnQ6CiAgZXhwb3NlVHJhbnNwb3J0UG9ydDogdHJ1ZQo="},{"name":"ci/extrainitcontainers-values.yaml","data":"ZXh0cmFJbml0Q29udGFpbmVyczogfAogIC0gbmFtZTogInBsdWdpbi1pbnN0YWxsLWluZ2VzdC1hdHRhY2htZW50IgogICAgaW1hZ2U6ICJkb2NrZXIuZWxhc3RpYy5jby9lbGFzdGljc2VhcmNoL2VsYXN0aWNzZWFyY2gtb3NzOjYuNi4xIgogICAgY29tbWFuZDogWyIvYmluL2Jhc2giXQogICAgYXJnczogWyItYyIsICJ5ZXMgfCAvdXNyL3NoYXJlL2VsYXN0aWNzZWFyY2gvYmluL2VsYXN0aWNzZWFyY2gtcGx1Z2luIGluc3RhbGwgaW5nZXN0LWF0dGFjaG1lbnQiXQogIC0gbmFtZTogInBsdWdpbi1pbnN0YWxsLW1hcHBlci1zaXplIgogICAgaW1hZ2U6ICJkb2NrZXIuZWxhc3RpYy5jby9lbGFzdGljc2VhcmNoL2VsYXN0aWNzZWFyY2gtb3NzOjYuNi4xIgogICAgY29tbWFuZDogWyIvYmluL2Jhc2giXQogICAgYXJnczogWyItYyIsICJ5ZXMgfCAvdXNyL3NoYXJlL2VsYXN0aWNzZWFyY2gvYmluL2VsYXN0aWNzZWFyY2gtcGx1Z2luIGluc3RhbGwgbWFwcGVyLXNpemUiXQo="},{"name":"ci/hooks-values.yaml","data":"LS0tCiMgRW5hYmxlIGN1c3RvbSBsaWZlY3ljbGUgaG9va3MgZm9yIGNsaWVudCwgZGF0YSBhbmQgbWFzdGVyIHBvZHMKCmNsaWVudDoKICBob29rczoKICAgIHByZVN0b3A6IHwtCiAgICAgICMhL2Jpbi9iYXNoCiAgICAgIGVjaG8gIk5vZGUge3sgdGVtcGxhdGUgImVsYXN0aWNzZWFyY2guY2xpZW50LmZ1bGxuYW1lIiAuIH19IGlzIHNodXR0aW5nIGRvd24iCiAgICBwb3N0U3RhcnQ6IHwtCiAgICAgICMhL2Jpbi9iYXNoCiAgICAgIGVjaG8gIk5vZGUge3sgdGVtcGxhdGUgImVsYXN0aWNzZWFyY2guY2xpZW50LmZ1bGxuYW1lIiAuIH19IGlzIHJlYWR5IHRvIGJlIHVzZWQiCgpkYXRhOgogIGhvb2tzOgogICAgZHJhaW46CiAgICAgIGVuYWJsZWQ6IGZhbHNlCiAgICBwcmVTdG9wOiB8LQogICAgICAjIS9iaW4vYmFzaAogICAgICBlY2hvICJOb2RlIHt7IHRlbXBsYXRlICJlbGFzdGljc2VhcmNoLmRhdGEuZnVsbG5hbWUiIC4gfX0gaXMgc2h1dHRpbmcgZG93biIKICAgIHBvc3RTdGFydDogfC0KICAgICAgIyEvYmluL2Jhc2gKICAgICAgZWNobyAiTm9kZSB7eyB0ZW1wbGF0ZSAiZWxhc3RpY3NlYXJjaC5kYXRhLmZ1bGxuYW1lIiAuIH19IGlzIHJlYWR5IHRvIGJlIHVzZWQiCgptYXN0ZXI6CiAgaG9va3M6CiAgICBwcmVTdG9wOiB8LQogICAgICAjIS9iaW4vYmFzaAogICAgICBlY2hvICJOb2RlIHt7IHRlbXBsYXRlICJlbGFzdGljc2VhcmNoLm1hc3Rlci5mdWxsbmFtZSIgLiB9fSBpcyBzaHV0dGluZyBkb3duIgogICAgcG9zdFN0YXJ0OiB8LQogICAgICAjIS9iaW4vYmFzaAogICAgICBlY2hvICJOb2RlIHt7IHRlbXBsYXRlICJlbGFzdGljc2VhcmNoLm1hc3Rlci5mdWxsbmFtZSIgLiB9fSBpcyByZWFkeSB0byBiZSB1c2VkIgo="},{"name":"ci/nonroot-deployment-values.yaml","data":"LS0tCiMgRGVwbG95IENoYXJ0IGFzIG5vbi1yb290IGFuZCB1bnByaXZpbGVnZWQKCmNob3duSW5pdENvbnRhaW5lcjoKICBlbmFibGVkOiBmYWxzZQoKc2VjdXJpdHlDb250ZXh0OgogIGVuYWJsZWQ6IHRydWUKICBydW5Bc1VzZXI6IDEwMDAKCnN5c2N0bEluaXRDb250YWluZXI6CiAgZW5hYmxlZDogZmFsc2UK"},{"name":"ci/plugin-initcontainer-values.yaml","data":"LS0tCiMgRW5hYmxlIGluaXQgY29udGFpbmVyIGZvciBpbnN0YWxsaW5nIHBsdWdpbnMKCmNsdXN0ZXI6CiAgcGx1Z2luczoKICAgIC0gaW5nZXN0LWF0dGFjaG1lbnQKICAgIC0gbWFwcGVyLXNpemUK"},{"name":"ci/updatestrategy-values.yaml","data":"ZGF0YToKICB1cGRhdGVTdHJhdGVneToKICAgIHR5cGU6IFJvbGxpbmdVcGRhdGUKCm1hc3RlcjoKICB1cGRhdGVTdHJhdGVneToKICAgIHR5cGU6IFJvbGxpbmdVcGRhdGUK"}]},"manifest":"---\n# Source: elasticsearch/templates/client-serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    app: elasticsearch\n    chart: elasticsearch-1.32.4\n    component: \"client\"\n    heritage: Helm\n    release: elas\n  name: elas-elasticsearch-client\n---\n# Source: elasticsearch/templates/data-serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    app: elasticsearch\n    chart: elasticsearch-1.32.4\n    component: \"data\"\n    heritage: Helm\n    release: elas\n  name: elas-elasticsearch-data\n---\n# Source: elasticsearch/templates/master-serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    app: elasticsearch\n    chart: elasticsearch-1.32.4\n    component: \"master\"\n    heritage: Helm\n    release: elas\n  name: elas-elasticsearch-master\n---\n# Source: elasticsearch/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: elas-elasticsearch\n  labels:\n    app: elas-elasticsearch\n    chart: \"elasticsearch-1.32.4\"\n    release: \"elas\"\n    heritage: \"Helm\"\ndata:\n  elasticsearch.yml: |-\n    cluster.name: elasticsearch\n\n    node.data: ${NODE_DATA:true}\n    node.master: ${NODE_MASTER:true}\n    node.ingest: ${NODE_INGEST:true}\n    node.name: ${HOSTNAME}\n    network.host: 0.0.0.0\n    # see https://github.com/kubernetes/kubernetes/issues/3595\n    bootstrap.memory_lock: ${BOOTSTRAP_MEMORY_LOCK:false}\n\n    discovery:\n      zen:\n        ping.unicast.hosts: ${DISCOVERY_SERVICE:}\n        minimum_master_nodes: ${MINIMUM_MASTER_NODES:2}\n\n    # see https://github.com/elastic/elasticsearch-definitive-guide/pull/679\n    processors: ${PROCESSORS:}\n\n    # avoid split-brain w/ a minimum consensus of two masters plus a data node\n    gateway.expected_master_nodes: ${EXPECTED_MASTER_NODES:2}\n    gateway.expected_data_nodes: ${EXPECTED_DATA_NODES:1}\n    gateway.recover_after_time: ${RECOVER_AFTER_TIME:5m}\n    gateway.recover_after_master_nodes: ${RECOVER_AFTER_MASTER_NODES:2}\n    gateway.recover_after_data_nodes: ${RECOVER_AFTER_DATA_NODES:1}\n  log4j2.properties: |-\n    status = error\n    appender.console.type = Console\n    appender.console.name = console\n    appender.console.layout.type = PatternLayout\n    appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] %marker%m%n\n    rootLogger.level = info\n    rootLogger.appenderRef.console.ref = console\n    logger.searchguard.name = com.floragunn\n    logger.searchguard.level = info\n    \n  data-pre-stop-hook.sh: |-\n    #!/bin/bash\n    exec \u0026\u003e \u003e(tee -a \"/var/log/elasticsearch-hooks.log\")\n    NODE_NAME=${HOSTNAME}\n    echo \"Prepare to migrate data of the node ${NODE_NAME}\"\n    echo \"Move all data from node ${NODE_NAME}\"\n    curl -s -XPUT -H 'Content-Type: application/json' 'elas-elasticsearch-client:9200/_cluster/settings' -d \"{\n      \\\"transient\\\" :{\n          \\\"cluster.routing.allocation.exclude._name\\\" : \\\"${NODE_NAME}\\\"\n      }\n    }\"\n    echo \"\"\n\n    while true ; do\n      echo -e \"Wait for node ${NODE_NAME} to become empty\"\n      SHARDS_ALLOCATION=$(curl -s -XGET 'http://elas-elasticsearch-client:9200/_cat/shards')\n      if ! echo \"${SHARDS_ALLOCATION}\" | grep -E \"${NODE_NAME}\"; then\n        break\n      fi\n      sleep 1\n    done\n    echo \"Node ${NODE_NAME} is ready to shutdown\"\n  data-post-start-hook.sh: |-\n    #!/bin/bash\n    exec \u0026\u003e \u003e(tee -a \"/var/log/elasticsearch-hooks.log\")\n    NODE_NAME=${HOSTNAME}\n    CLUSTER_SETTINGS=$(curl -s -XGET \"http://elas-elasticsearch-client:9200/_cluster/settings\")\n    if echo \"${CLUSTER_SETTINGS}\" | grep -E \"${NODE_NAME}\"; then\n      echo \"Activate node ${NODE_NAME}\"\n      curl -s -XPUT -H 'Content-Type: application/json' \"http://elas-elasticsearch-client:9200/_cluster/settings\" -d \"{\n        \\\"transient\\\" :{\n            \\\"cluster.routing.allocation.exclude._name\\\" : null\n        }\n      }\"\n    fi\n    echo \"Node ${NODE_NAME} is ready to be used\"\n---\n# Source: elasticsearch/templates/tests/test-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: elas-elasticsearch-test\n  labels:\n    app: elas-elasticsearch\n    chart: \"elasticsearch-1.32.4\"\n    heritage: \"Helm\"\n    release: \"elas\"\ndata:\n  run.sh: |-\n    @test \"Test Access and Health\" {\n      curl -D - http://elas-elasticsearch-client:9200\n      curl -D - http://elas-elasticsearch-client:9200/_cluster/health?wait_for_status=green\n    }\n---\n# Source: elasticsearch/templates/client-svc.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: elasticsearch\n    chart: elasticsearch-1.32.4\n    component: \"client\"\n    heritage: Helm\n    release: elas\n  name: elas-elasticsearch-client\n\nspec:\n  ports:\n    - name: http\n      port: 9200\n      targetPort: http\n  selector:\n    app: elasticsearch\n    component: \"client\"\n    release: elas\n  type: ClusterIP\n---\n# Source: elasticsearch/templates/master-svc.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: elasticsearch\n    chart: elasticsearch-1.32.4\n    component: \"master\"\n    heritage: Helm\n    release: elas\n  name: elas-elasticsearch-discovery\nspec:\n  clusterIP: None\n  ports:\n    - port: 9300\n      targetPort: transport\n  selector:\n    app: elasticsearch\n    component: \"master\"\n    release: elas\n---\n# Source: elasticsearch/templates/client-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: elasticsearch\n    chart: elasticsearch-1.32.4\n    component: \"client\"\n    heritage: Helm\n    release: elas\n  name: elas-elasticsearch-client\nspec:\n  selector:\n    matchLabels:\n      app: elasticsearch\n      component: \"client\"\n      release: elas\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: elasticsearch\n        component: \"client\"\n        release: elas\n      annotations:\n        checksum/config: 8b4043aca6ddf4b7f3e50c8db48ecb399c6619373256519f32e3d3d8a93134c8\n    spec:\n      serviceAccountName: elas-elasticsearch-client\n      securityContext:\n        fsGroup: 1000\n      affinity:\n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n          - weight: 1\n            podAffinityTerm:\n              topologyKey: kubernetes.io/hostname\n              labelSelector:\n                matchLabels:\n                  app: \"elasticsearch\"\n                  release: \"elas\"\n                  component: \"client\"\n      initContainers:\n      # see https://www.elastic.co/guide/en/elasticsearch/reference/current/vm-max-map-count.html\n      # and https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-configuration-memory.html#mlockall\n      - name: \"sysctl\"\n        image: \"busybox:latest\"\n        imagePullPolicy: \"Always\"\n        resources:\n            {}\n        command: [\"sysctl\", \"-w\", \"vm.max_map_count=262144\"]\n        securityContext:\n          privileged: true\n      containers:\n      - name: elasticsearch\n        env:\n        - name: NODE_DATA\n          value: \"false\"\n        - name: NODE_MASTER\n          value: \"false\"\n        - name: DISCOVERY_SERVICE\n          value: elas-elasticsearch-discovery\n        - name: PROCESSORS\n          valueFrom:\n            resourceFieldRef:\n              resource: limits.cpu\n        - name: ES_JAVA_OPTS\n          value: \"-Djava.net.preferIPv4Stack=true -Xms512m -Xmx512m  \"\n        - name: MINIMUM_MASTER_NODES\n          value: \"2\"\n        resources:\n            limits:\n              cpu: \"1\"\n            requests:\n              cpu: 25m\n              memory: 512Mi\n        readinessProbe:\n          httpGet:\n            path: /_cluster/health\n            port: 9200\n          initialDelaySeconds: 5\n        livenessProbe:\n          httpGet:\n            path: /_cluster/health?local=true\n            port: 9200\n          initialDelaySeconds: 90\n        image: \"docker.elastic.co/elasticsearch/elasticsearch-oss:6.8.6\"\n        imagePullPolicy: \"IfNotPresent\"\n        ports:\n        - containerPort: 9200\n          name: http\n        - containerPort: 9300\n          name: transport\n        volumeMounts:\n        - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml\n          name: config\n          subPath: elasticsearch.yml\n      volumes:\n      - name: config\n        configMap:\n          name: elas-elasticsearch\n---\n# Source: elasticsearch/templates/data-statefulset.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  labels:\n    app: elasticsearch\n    chart: elasticsearch-1.32.4\n    component: \"data\"\n    heritage: Helm\n    release: elas\n  name: elas-elasticsearch-data\nspec:\n  selector:\n    matchLabels:\n      app: elasticsearch\n      component: \"data\"\n      release: elas\n      role: data\n  serviceName: elas-elasticsearch-data\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: elasticsearch\n        component: \"data\"\n        release: elas\n        role: data\n    spec:\n      serviceAccountName: elas-elasticsearch-data\n      securityContext:\n        fsGroup: 1000\n      affinity:\n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n          - weight: 1\n            podAffinityTerm:\n              topologyKey: kubernetes.io/hostname\n              labelSelector:\n                matchLabels:\n                  app: \"elasticsearch\"\n                  release: \"elas\"\n                  component: \"data\"\n      initContainers:\n      # see https://www.elastic.co/guide/en/elasticsearch/reference/current/vm-max-map-count.html\n      # and https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-configuration-memory.html#mlockall\n      - name: \"sysctl\"\n        image: \"busybox:latest\"\n        imagePullPolicy: \"Always\"\n        resources:\n            {}\n        command: [\"sysctl\", \"-w\", \"vm.max_map_count=262144\"]\n        securityContext:\n          privileged: true\n      - name: \"chown\"\n        image: \"docker.elastic.co/elasticsearch/elasticsearch-oss:6.8.6\"\n        imagePullPolicy: \"IfNotPresent\"\n        resources:\n            {}\n        command:\n        - /bin/bash\n        - -c\n        - \u003e\n          set -e;\n          set -x;\n          chown elasticsearch:elasticsearch /usr/share/elasticsearch/data;\n          for datadir in $(find /usr/share/elasticsearch/data -mindepth 1 -maxdepth 1 -not -name \".snapshot\"); do\n            chown -R elasticsearch:elasticsearch $datadir;\n          done;\n          chown elasticsearch:elasticsearch /usr/share/elasticsearch/logs;\n          for logfile in $(find /usr/share/elasticsearch/logs -mindepth 1 -maxdepth 1 -not -name \".snapshot\"); do\n            chown -R elasticsearch:elasticsearch $logfile;\n          done\n        securityContext:\n          runAsUser: 0\n        volumeMounts:\n        - mountPath: /usr/share/elasticsearch/data\n          name: data\n      containers:\n      - name: elasticsearch\n        env:\n        - name: DISCOVERY_SERVICE\n          value: elas-elasticsearch-discovery\n        - name: NODE_MASTER\n          value: \"false\"\n        - name: PROCESSORS\n          valueFrom:\n            resourceFieldRef:\n              resource: limits.cpu\n        - name: ES_JAVA_OPTS\n          value: \"-Djava.net.preferIPv4Stack=true -Xms1536m -Xmx1536m  \"\n        - name: MINIMUM_MASTER_NODES\n          value: \"2\"\n        image: \"docker.elastic.co/elasticsearch/elasticsearch-oss:6.8.6\"\n        imagePullPolicy: \"IfNotPresent\"\n        ports:\n        - containerPort: 9300\n          name: transport\n\n        resources:\n            limits:\n              cpu: \"1\"\n            requests:\n              cpu: 25m\n              memory: 1536Mi\n        readinessProbe:\n          httpGet:\n            path: /_cluster/health?local=true\n            port: 9200\n          initialDelaySeconds: 5\n        volumeMounts:\n        - mountPath: /usr/share/elasticsearch/data\n          name: data\n        - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml\n          name: config\n          subPath: elasticsearch.yml\n        - name: config\n          mountPath: /data-pre-stop-hook.sh\n          subPath: data-pre-stop-hook.sh\n        - name: config\n          mountPath: /data-post-start-hook.sh\n          subPath: data-post-start-hook.sh\n        lifecycle:\n          preStop:\n            exec:\n              command: [\"/bin/bash\",\"/data-pre-stop-hook.sh\"]\n          postStart:\n            exec:\n              command: [\"/bin/bash\",\"/data-post-start-hook.sh\"]\n      terminationGracePeriodSeconds: 3600\n      volumes:\n      - name: config\n        configMap:\n          name: elas-elasticsearch\n  podManagementPolicy: OrderedReady\n  updateStrategy:\n    type: OnDelete\n  volumeClaimTemplates:\n  - metadata:\n      name: data\n    spec:\n      accessModes:\n        - \"ReadWriteOnce\"\n      resources:\n        requests:\n          storage: \"30Gi\"\n---\n# Source: elasticsearch/templates/master-statefulset.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  labels:\n    app: elasticsearch\n    chart: elasticsearch-1.32.4\n    component: \"master\"\n    heritage: Helm\n    release: elas\n  name: elas-elasticsearch-master\nspec:\n  selector:\n    matchLabels:\n      app: elasticsearch\n      component: \"master\"\n      release: elas\n      role: master\n  serviceName: elas-elasticsearch-master\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: elasticsearch\n        component: \"master\"\n        release: elas\n        role: master\n    spec:\n      serviceAccountName: elas-elasticsearch-master\n      securityContext:\n        fsGroup: 1000\n      affinity:\n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n          - weight: 1\n            podAffinityTerm:\n              topologyKey: kubernetes.io/hostname\n              labelSelector:\n                matchLabels:\n                  app: \"elasticsearch\"\n                  release: \"elas\"\n                  component: \"master\"\n      initContainers:\n      # see https://www.elastic.co/guide/en/elasticsearch/reference/current/vm-max-map-count.html\n      # and https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-configuration-memory.html#mlockall\n      - name: \"sysctl\"\n        image: \"busybox:latest\"\n        imagePullPolicy: \"Always\"\n        resources:\n            {}\n        command: [\"sysctl\", \"-w\", \"vm.max_map_count=262144\"]\n        securityContext:\n          privileged: true\n      - name: \"chown\"\n        image: \"docker.elastic.co/elasticsearch/elasticsearch-oss:6.8.6\"\n        imagePullPolicy: \"IfNotPresent\"\n        resources:\n            {}\n        command:\n        - /bin/bash\n        - -c\n        - \u003e\n          set -e;\n          set -x;\n          chown elasticsearch:elasticsearch /usr/share/elasticsearch/data;\n          for datadir in $(find /usr/share/elasticsearch/data -mindepth 1 -maxdepth 1 -not -name \".snapshot\"); do\n            chown -R elasticsearch:elasticsearch $datadir;\n          done;\n          chown elasticsearch:elasticsearch /usr/share/elasticsearch/logs;\n          for logfile in $(find /usr/share/elasticsearch/logs -mindepth 1 -maxdepth 1 -not -name \".snapshot\"); do\n            chown -R elasticsearch:elasticsearch $logfile;\n          done\n        securityContext:\n          runAsUser: 0\n        volumeMounts:\n        - mountPath: /usr/share/elasticsearch/data\n          name: data\n      containers:\n      - name: elasticsearch\n        env:\n        - name: NODE_DATA\n          value: \"false\"\n        - name: DISCOVERY_SERVICE\n          value: elas-elasticsearch-discovery\n        - name: PROCESSORS\n          valueFrom:\n            resourceFieldRef:\n              resource: limits.cpu\n        - name: ES_JAVA_OPTS\n          value: \"-Djava.net.preferIPv4Stack=true -Xms512m -Xmx512m  \"\n        - name: MINIMUM_MASTER_NODES\n          value: \"2\"\n        resources:\n            limits:\n              cpu: \"1\"\n            requests:\n              cpu: 25m\n              memory: 512Mi\n        readinessProbe:\n          httpGet:\n            path: /_cluster/health?local=true\n            port: 9200\n          initialDelaySeconds: 5\n        image: \"docker.elastic.co/elasticsearch/elasticsearch-oss:6.8.6\"\n        imagePullPolicy: \"IfNotPresent\"\n        ports:\n        - containerPort: 9300\n          name: transport\n\n        volumeMounts:\n        - mountPath: /usr/share/elasticsearch/data\n          name: data\n        - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml\n          name: config\n          subPath: elasticsearch.yml\n      volumes:\n      - name: config\n        configMap:\n          name: elas-elasticsearch\n  podManagementPolicy: OrderedReady\n  updateStrategy:\n    type: OnDelete\n  volumeClaimTemplates:\n  - metadata:\n      name: data\n    spec:\n      accessModes:\n        - \"ReadWriteOnce\"\n      resources:\n        requests:\n          storage: \"4Gi\"\n","hooks":[{"name":"elas-elasticsearch-test","kind":"Pod","path":"elasticsearch/templates/tests/test.yaml","manifest":"apiVersion: v1\nkind: Pod\nmetadata:\n  name: elas-elasticsearch-test\n  labels:\n    app: elas-elasticsearch\n    chart: \"elasticsearch-1.32.4\"\n    heritage: \"Helm\"\n    release: \"elas\"\n  annotations:\n    \"helm.sh/hook\": test-success\nspec:\n  initContainers:\n    - name: test-framework\n      image: \"dduportal/bats:0.4.0\"\n      command:\n      - \"bash\"\n      - \"-c\"\n      - |\n        set -ex\n        # copy bats to tools dir\n        cp -R /usr/local/libexec/ /tools/bats/\n      volumeMounts:\n      - mountPath: /tools\n        name: tools\n  containers:\n    - name: elas-test\n      image: \"dduportal/bats:0.4.0\"\n      command: [\"/tools/bats/bats\", \"-t\", \"/tests/run.sh\"]\n      volumeMounts:\n      - mountPath: /tests\n        name: tests\n        readOnly: true\n      - mountPath: /tools\n        name: tools\n  volumes:\n  - name: tests\n    configMap:\n      name: elas-elasticsearch-test\n  - name: tools\n    emptyDir: {}\n  restartPolicy: Never","events":["test"],"last_run":{"started_at":"","completed_at":"","phase":""}}],"version":1,"namespace":"default"}
